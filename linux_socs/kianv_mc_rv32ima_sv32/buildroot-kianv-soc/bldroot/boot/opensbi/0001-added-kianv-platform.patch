From 89f8ef30f15c02fe4d891b8abb1a9ffcdcfc3215 Mon Sep 17 00:00:00 2001
From: Hirosh Dabui <hirosh@dabui.de>
Date: Sun, 10 Mar 2024 11:53:04 +0100
Subject: [PATCH] added kianv platform

---
 Makefile                              |   4 +-
 platform/fpga/kianv/Kconfig           |   8 ++
 platform/fpga/kianv/configs/defconfig |   3 +
 platform/fpga/kianv/objects.mk        |  43 +++++++
 platform/fpga/kianv/platform.c        | 172 ++++++++++++++++++++++++++
 5 files changed, 228 insertions(+), 2 deletions(-)
 create mode 100644 platform/fpga/kianv/Kconfig
 create mode 100644 platform/fpga/kianv/configs/defconfig
 create mode 100644 platform/fpga/kianv/objects.mk
 create mode 100644 platform/fpga/kianv/platform.c

diff --git a/Makefile b/Makefile
index de4e73a..b04fb79 100644
--- a/Makefile
+++ b/Makefile
@@ -271,9 +271,9 @@ endif
 ifndef PLATFORM_RISCV_ISA
   ifneq ($(PLATFORM_RISCV_TOOLCHAIN_DEFAULT), 1)
     ifeq ($(CC_SUPPORT_ZICSR_ZIFENCEI), y)
-      PLATFORM_RISCV_ISA = rv$(PLATFORM_RISCV_XLEN)imafdc_zicsr_zifencei
+      PLATFORM_RISCV_ISA = rv$(PLATFORM_RISCV_XLEN)ima_zicsr_zifencei
     else
-      PLATFORM_RISCV_ISA = rv$(PLATFORM_RISCV_XLEN)imafdc
+      PLATFORM_RISCV_ISA = rv$(PLATFORM_RISCV_XLEN)ima
     endif
   else
     PLATFORM_RISCV_ISA = $(OPENSBI_CC_ISA)
diff --git a/platform/fpga/kianv/Kconfig b/platform/fpga/kianv/Kconfig
new file mode 100644
index 0000000..e1b2e2a
--- /dev/null
+++ b/platform/fpga/kianv/Kconfig
@@ -0,0 +1,8 @@
+# SPDX-License-Identifier: BSD-2-Clause
+
+config PLATFORM_KIANV_FPGA
+	bool
+	select FDT
+	select SERIAL_UART8250
+	select TIMER_MTIMER
+	default y
diff --git a/platform/fpga/kianv/configs/defconfig b/platform/fpga/kianv/configs/defconfig
new file mode 100644
index 0000000..918ad90
--- /dev/null
+++ b/platform/fpga/kianv/configs/defconfig
@@ -0,0 +1,3 @@
+#define CONFIG_CLINT
+#define CONFIG_UART8250
+#define CONFIG_SBI_LEGACY_ECALL
diff --git a/platform/fpga/kianv/objects.mk b/platform/fpga/kianv/objects.mk
new file mode 100644
index 0000000..7f1e820
--- /dev/null
+++ b/platform/fpga/kianv/objects.mk
@@ -0,0 +1,43 @@
+#
+# SPDX-License-Identifier: BSD-2-Clause
+#
+# Copyright (C) 2019 FORTH-ICS/CARV
+#		Panagiotis Peristerakis <perister@ics.forth.gr>
+#
+
+# Compiler flags
+platform-cppflags-y =
+platform-cflags-y =
+platform-asflags-y =
+platform-ldflags-y =
+
+# Object to build
+platform-objs-y += platform.o
+
+PLATFORM_RISCV_XLEN = 32 
+
+# Blobs to build
+FW_TEXT_START=0x80000000
+FW_JUMP=n
+
+ifeq ($(PLATFORM_RISCV_XLEN), 32)
+ # This needs to be 4MB aligned for 32-bit support
+ FW_JUMP_ADDR=0x80400000
+ else
+ # This needs to be 2MB aligned for 64-bit support
+ FW_JUMP_ADDR=0x80200000
+ endif
+FW_JUMP_FDT_ADDR=0x801f0000
+
+# Firmware with payload configuration.
+FW_PAYLOAD=y
+
+ifeq ($(PLATFORM_RISCV_XLEN), 32)
+# This needs to be 4MB aligned for 32-bit support
+  FW_PAYLOAD_OFFSET=0x400000
+else
+# This needs to be 2MB aligned for 64-bit support
+  FW_PAYLOAD_OFFSET=0x200000
+endif
+FW_PAYLOAD_FDT_ADDR=0x801f0000
+FW_PAYLOAD_ALIGN=0x1000
diff --git a/platform/fpga/kianv/platform.c b/platform/fpga/kianv/platform.c
new file mode 100644
index 0000000..154dd12
--- /dev/null
+++ b/platform/fpga/kianv/platform.c
@@ -0,0 +1,172 @@
+/* SPDX-License-Identifier: BSD-2-Clause */
+/*
+ * Copyright (C) 2019 FORTH-ICS/CARV
+ *				Panagiotis Peristerakis <perister@ics.forth.gr>
+ */
+
+#include <sbi/riscv_asm.h>
+#include <sbi/riscv_encoding.h>
+#include <sbi/riscv_io.h>
+#include <sbi/sbi_console.h>
+#include <sbi/sbi_const.h>
+#include <sbi/sbi_hart.h>
+#include <sbi/sbi_platform.h>
+#include <sbi_utils/fdt/fdt_helper.h>
+#include <sbi_utils/fdt/fdt_fixup.h>
+#include <sbi_utils/ipi/aclint_mswi.h>
+#include <sbi_utils/irqchip/plic.h>
+#include <sbi_utils/serial/uart8250.h>
+#include <sbi_utils/timer/aclint_mtimer.h>
+
+#define KIANV_UART_ADDR 0x10000000
+#define KIANV_UART_FREQ 50000000
+#define KIANV_UART_BAUDRATE 115200
+#define KIANV_UART_REG_SHIFT 0
+#define KIANV_UART_REG_WIDTH 1
+#define KIANV_UART_REG_OFFSET 0
+#define KIANV_PLIC_ADDR 0xc000000
+#define KIANV_PLIC_NUM_SOURCES 3
+#define KIANV_HART_COUNT 1
+#define KIANV_CLINT_ADDR 0x11004000
+#define KIANV_ACLINT_MTIMER_FREQ 1000000
+#define KIANV_ACLINT_MSWI_ADDR (KIANV_CLINT_ADDR + CLINT_MSWI_OFFSET)
+#define KIANV_ACLINT_MTIMER_ADDR (KIANV_CLINT_ADDR + CLINT_MTIMER_OFFSET)
+
+/*
+static struct aclint_mswi_data mswi = {
+	.addr = KIANV_ACLINT_MSWI_ADDR,
+	.size = ACLINT_MSWI_SIZE,
+	.first_hartid = 0,
+	.hart_count = KIANV_HART_COUNT,
+};
+*/
+
+/*
+static struct aclint_mtimer_data mtimer = {
+	.mtime_freq = KIANV_ACLINT_MTIMER_FREQ,
+	.mtime_addr = KIANV_ACLINT_MTIMER_ADDR +
+		      ACLINT_DEFAULT_MTIME_OFFSET,
+	.mtime_size = ACLINT_DEFAULT_MTIME_SIZE,
+	.mtimecmp_addr = KIANV_ACLINT_MTIMER_ADDR +
+			 ACLINT_DEFAULT_MTIMECMP_OFFSET,
+	.mtimecmp_size = ACLINT_DEFAULT_MTIMECMP_SIZE,
+	.first_hartid = 0,
+	.hart_count = KIANV_HART_COUNT,
+	.has_64bit_mmio = false,
+};
+*/
+
+static struct aclint_mtimer_data mtimer = {
+	.mtime_freq	= 1000000,
+	.mtime_addr	= 0x1100bff8,
+	.mtime_size	= 8,
+	.mtimecmp_addr	= 0x11004000,
+	.mtimecmp_size	= 8,
+	.first_hartid	= 0,
+	.hart_count	= KIANV_HART_COUNT,
+	.has_64bit_mmio = false
+};
+
+
+/*
+ * kianv platform early initialization.
+ */
+static int kianv_early_init(bool cold_boot)
+{
+	return 0;
+}
+
+/*
+ * Ariane platform final initialization.
+ */
+static int kianv_final_init(bool cold_boot)
+{
+	void *fdt;
+
+	if (!cold_boot)
+		return 0;
+
+	fdt = fdt_get_address();
+	fdt_fixups(fdt);
+
+  /*
+  csr_write(CSR_MIE, 1 << IRQ_M_TIMER);
+  csr_write(CSR_MSTATUS, (PRV_S << MSTATUS_MPP_SHIFT) | MSTATUS_MPIE);
+
+	csr_write(CSR_MEDELEG,
+		~((1U << CAUSE_SUPERVISOR_ECALL) |
+		  (1U << CAUSE_ILLEGAL_INSTRUCTION) |
+		  (1U << CAUSE_MISALIGNED_LOAD) |
+		  (1U << CAUSE_MISALIGNED_STORE)));
+
+	csr_write(CSR_MIDELEG, ~((1U << IRQ_M_TIMER)));
+  */
+
+	return 0;
+}
+
+/*
+ * Initialize the kianv console.
+ */
+static int kianv_console_init(void)
+{
+	return uart8250_init(KIANV_UART_ADDR, KIANV_UART_FREQ,
+			     KIANV_UART_BAUDRATE, KIANV_UART_REG_SHIFT,
+			     KIANV_UART_REG_WIDTH, KIANV_UART_REG_OFFSET);
+}
+
+/*
+ * Initialize IPI for current HART.
+ */
+/*
+static int kianv_ipi_init(bool cold_boot)
+{
+	int ret;
+
+	if (cold_boot) {
+		ret = aclint_mswi_cold_init(&mswi);
+		if (ret)
+			return ret;
+	}
+
+	return aclint_mswi_warm_init();
+}
+*/
+
+/*
+ * Initialize kianv timer for current HART.
+ */
+static int kianv_timer_init(bool cold_boot)
+{
+	int ret;
+
+	if (cold_boot) {
+		ret = aclint_mtimer_cold_init(&mtimer, NULL);
+		if (ret)
+			return ret;
+	}
+
+	return aclint_mtimer_warm_init();
+}
+
+/*
+ * Platform descriptor.
+ */
+const struct sbi_platform_operations platform_ops = {
+	.early_init   = kianv_early_init,
+	.final_init   = kianv_final_init,
+	.console_init = kianv_console_init,
+//	.ipi_init = kianv_ipi_init,
+	.timer_init   = kianv_timer_init
+};
+
+const struct sbi_platform platform = {
+	.opensbi_version   = OPENSBI_VERSION,
+	.platform_version  = SBI_PLATFORM_VERSION(0x0, 0x01),
+	.name		   = "KIANV RISC-V",
+	.features	   = SBI_PLATFORM_DEFAULT_FEATURES,
+	.hart_count	   = KIANV_HART_COUNT,
+	.hart_stack_size   = SBI_PLATFORM_DEFAULT_HART_STACK_SIZE,
+	.heap_size	   = SBI_PLATFORM_DEFAULT_HEAP_SIZE(KIANV_HART_COUNT),
+	.platform_ops_addr = (unsigned long)&platform_ops
+};
-- 
2.40.1

